<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Connexion</title>
    <style>
        :root {
            --bg-dark: #1e1e2f;
            --bg-light: #f8f9fa;

            --container-dark: #292b3b;
            --container-light: #ffffff;

            --text-dark: #f1f1f5;
            --text-light: #2c3e50;

            --input-bg-dark: #343a40;
            --input-bg-light: #f1f3f5;

            --input-border-dark: #4f4f5a;
            --input-border-light: #d1d1d1;

            --button-bg-dark: #4a90e2;
            --button-bg-light: #007bff;

            --button-hover-dark: #3b75c2;
            --button-hover-light: #0056b3;

            --accent-dark: #00b4ff;
            --accent-light: #0056b3;
        }

        body {
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            font-family: 'Inter', sans-serif;
            background-color: var(--bg-dark);
            color: var(--text-dark);
            transition: all 0.3s ease;
        }

        body.light-theme {
            background-color: var(--bg-light);
            color: var(--text-light);
        }

        .theme-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 10px;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            border: none;
            background: rgba(255, 255, 255, 0.1);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
            color: var(--text-dark);
        }

        body.light-theme .theme-toggle {
            background: rgba(0, 0, 0, 0.1);
            color: var(--text-light);
        }

        .container {
            position: relative;
            background-color: var(--container-dark);
            padding: 2.5rem;
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            width: 100%;
            max-width: 420px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.08);
            transition: all 0.3s ease;
        }

        body.light-theme .container {
            background-color: var(--container-light);
            border: 1px solid var(--input-border-light);
        }

        h1 {
            text-align: center;
            margin-bottom: 1.5rem;
            font-size: 1.8rem;
            font-weight: 600;
            letter-spacing: -0.5px;
        }

        .form-group {
            margin-bottom: 1rem;
            width: 100%;
        }

        .form-group label {
            display: block;
            font-size: 0.9rem;
            margin-bottom: 0.5rem;
            color: var(--text-dark);
        }

        body.light-theme .form-group label {
            color: var(--text-light);
        }

        .form-group input {
            width: 100%;
            padding: 0.8rem;
            margin-top: 0.5rem;
            border: 1px solid var(--input-border-dark);
            border-radius: 8px;
            background-color: var(--input-bg-dark);
            color: var(--text-dark);
            font-size: 1rem;
            box-sizing: border-box;
            transition: all 0.3s ease;
        }

        body.light-theme .form-group input {
            border-color: var(--input-border-light);
            background-color: var(--input-bg-light);
            color: var(--text-light);
        }

        .form-group input:focus {
            outline: none;
            border-color: var(--accent-dark);
            background: rgba(255, 255, 255, 0.1);
        }

        body.light-theme .form-group input:focus {
            border-color: var(--accent-light);
            background: rgba(0, 0, 0, 0.05);
        }

        .btn {
            width: 100%;
            padding: 0.8rem;
            border: none;
            border-radius: 8px;
            background-color: var(--button-bg-dark);
            color: white;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }

        body.light-theme .btn {
            background-color: var(--button-bg-light);
        }

        .btn:hover {
            background-color: var(--button-hover-dark);
        }

        body.light-theme .btn:hover {
            background-color: var(--button-hover-light);
        }

        .hidden {
            display: none;
        }

        .flash-message {
            padding: 15px;
            margin: 10px 0;
            border-radius: 5px;
            font-size: 1rem;
            display: flex;
            align-items: center;
        }

        .flash-success {
            background-color: #28a745;
            color: white;
        }

        .flash-danger {
            background-color: #dc3545;
            color: white;
        }

        .flash-message p {
            margin: 0;
            padding: 0;
        }

        .hidden {
            display: none;
        }

        .loading-indicator {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            background-color: rgba(0, 0, 0, 0.7);
            padding: 20px;
            border-radius: 10px;
            color: white;
        }

        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid white;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin-left: 26px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <button class="theme-toggle" onclick="toggleTheme()">
        üåô
    </button>

    <div class="container" id="loginPage">
        <h1>Connexion</h1>
        <form action="{{ path('app_login') }}" method="post">
            <div class="form-group">
                <label for="username">Identifiant</label>
                <input type="text" id="username" name="_username" placeholder="Entrez votre identifiant">
            </div>
            <div class="form-group">
                <label for="password">Mot de passe</label>
                <input type="password" id="password" name="_password" placeholder="Entrez votre mot de passe">
            </div>
            <button type="submit" class="btn">Se connecter</button>
            <button type="button" class="btn btn-secondary" onclick="showCreateAccount()">Cr√©er un compte</button>
        </form>
    </div>

    <div class="container hidden" id="createAccountPage">
        <h1>Cr√©er un compte</h1>
        <form>
            <div class="form-group">
                <label for="nom">Nom</label>
                <input type="text" id="nom" placeholder="Entrez votre nom">
            </div>
            <div class="form-group">
                <label for="prenom">Pr√©nom</label>
                <input type="text" id="prenom" placeholder="Entrez votre pr√©nom">
            </div>
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" placeholder="Entrez votre email">
            </div>
            <div class="form-group">
                <label for="newPassword">Mot de passe</label>
                <input type="password" id="newPassword" placeholder="Cr√©ez votre mot de passe">
            </div>
            <button type="submit" class="btn">Cr√©er le compte</button>
            <button type="button" class="btn btn-secondary" onclick="showLogin()">Retour √† la connexion</button>
        </form>
    </div>

    <script>
        function showCreateAccount() {
            document.getElementById('loginPage').classList.add('hidden');
            document.getElementById('createAccountPage').classList.remove('hidden');
        }

        function showLogin() {
            document.getElementById('createAccountPage').classList.add('hidden');
            document.getElementById('loginPage').classList.remove('hidden');
        }

        function toggleTheme() {
            document.body.classList.toggle('light-theme');
        }

        function validateLoginForm() {
            const login = document.getElementById('login').value;
            const password = document.getElementById('password').value;
            if (!login || !password) {
                alert("Veuillez remplir tous les champs.");
                return false;
            }
            return true;
        }

        async function submitLoginForm() {
            const login = document.getElementById('login').value;
            const password = document.getElementById('password').value;

            // Afficher l'indicateur de chargement
            document.getElementById('loadingIndicator').classList.remove('hidden');

            try {
                const response = await fetch('/login', {
                    method: 'POST',
                    body: JSON.stringify({ login, password }),
                    headers: { 'Content-Type': 'application/json' },
                });

                if (response.ok) {
                    window.location.href = '/dashboard'; // Redirection apr√®s une connexion r√©ussie
                } else {
                    // Affichage d'un message d'erreur si la connexion √©choue
                    alert("Identifiant ou mot de passe incorrect.");
                }
            } catch (error) {
                // Gestion des erreurs r√©seau ou autres erreurs
                alert("Une erreur est survenue. Veuillez r√©essayer.");
            } finally {
                // Masquer l'indicateur de chargement apr√®s la r√©ponse
                document.getElementById('loadingIndicator').classList.add('hidden');
            }
        }

        function showFlashMessage(type, message) {
            const flashContainer = document.createElement('div');
            flashContainer.classList.add('flash-message', `flash-${type}`);
            flashContainer.innerHTML = `<p>${message}</p>`;

            // Ajoutez le message au corps de la page
            document.body.appendChild(flashContainer);

            // Optionnellement, masquez le message apr√®s quelques secondes
            setTimeout(() => {
                flashContainer.remove();
            }, 5000); // Masquer apr√®s 5 secondes
        }
    </script>

    <div id="loadingIndicator" class="loading-indicator hidden">
        <div class="spinner"></div>
        <p>Chargement...</p>
    </div>

    {% for label, messages in app.flashes %}
        <div class="flash-message flash-{{ label }}">
            {% for message in messages %}
                <p>{{ message }}</p>
            {% endfor %}
        </div>
    {% endfor %}
</body>
</html>
